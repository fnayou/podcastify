name: release
on:
  push:
    tags:
      - "v*.*.*" # build/push on semver tags only
  pull_request:
    branches:
      - master # run CI on PRs; build locally, no push

env:
  REGISTRY: docker.io
  IMAGE_NAME: fnayou/podcastify

jobs:
  docker:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: write
      id-token: write # SBOM/provenance
      attestations: write # GitHub attestations
      security-events: write # upload SARIF to code scanning
      pull-requests: write # needed so Scout can post PR comments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1

      # Login only on tag pushes (PRs don't have secrets from forks)
      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Version info (nice labels; for PRs we create a synthetic version)
      - name: Extract version
        id: version
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
            IS_PRERELEASE="$([[ "${GITHUB_REF_NAME}" == *-* ]] && echo true || echo false)"
          else
            VERSION="$(date -u +%Y%m%d)-${GITHUB_SHA::7}"
            IS_PRERELEASE=false
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=${IS_PRERELEASE}" >> "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # For tag builds: vX.Y.Z, X.Y
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # Update 'latest' only for stable tags (no pre-release suffix)
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && !contains(github.ref_name, '-') }}
          labels: |
            org.opencontainers.image.title=podcastify
            org.opencontainers.image.description=tiny self-hosted podcast RSS generator. Create private podcast feeds from your own MP3s with zero fuss.
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      # Build & push on tag pushes (multi-arch)
      - name: Build & Push (tag)
        id: build-push
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/podcastify/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          sbom: true
          provenance: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      # PR builds: build locally (no push), single-arch for speed
      - name: Build (PR, no push)
        id: build-pr
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/podcastify/Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: local/podcastify:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      # ---------------- Docker Scout on PRs ----------------
      # Skip forked PRs (no secrets available)
      - name: Note about forked PRs (no Docker Hub secrets)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        run: echo "Skipping Docker Scout on forked PRs (no secrets). Trivy still runs."

      # Login + scan only for PRs from same repo
      - name: Login to Docker Hub (PR, same-repo only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Scout (PR)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        id: docker-scout
        continue-on-error: true
        uses: docker/scout-action@v1
        with:
          command: cves
          image: local://local/podcastify:${{ github.sha }}
          only-severities: critical,high
          only-fixed: true
          summary: true
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sarif-file: docker-scout.sarif

      - name: Upload SARIF (Scout, PR)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: docker-scout.sarif

      # ---------------- Security scanning (Trivy) ----------------

      # Tag pushes: scan the pushed image by immutable digest (fail on CRITICAL)
      - name: Trivy scan (push, fail on CRITICAL)
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}"
          format: "table"
          vuln-type: "os,library"
          severity: "CRITICAL"
          ignore-unfixed: true
          exit-code: "1"
          hide-progress: true

      # PRs: scan the local image (non-blocking)
      - name: Trivy scan (PR, non-blocking)
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: "local/podcastify:${{ github.sha }}"
          format: "table"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true
          exit-code: "0"
          hide-progress: true

      # SARIF for tag pushes
      - name: Trivy SARIF (push)
        id: sarif-push
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}"
          format: "sarif"
          output: "trivy-results.sarif"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"
          ignore-unfixed: true
          hide-progress: true

      - name: Upload SARIF (Trivy, push)
        if: steps.sarif-push.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # SARIF for PRs
      - name: Trivy SARIF (PR)
        id: sarif-pr
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: "local/podcastify:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"
          ignore-unfixed: true
          hide-progress: true

      - name: Upload SARIF (Trivy, PR)
        if: steps.sarif-pr.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Attest only for tag builds with fully-qualified subject-name
      - name: Generate artifact attestation
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

  # Optional: GitHub Release for tag builds
  release:
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Docker Image
            ```
            docker pull ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            ## Notes
            - Multi-arch: linux/amd64, linux/arm64
            - SBOM and provenance attached
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
